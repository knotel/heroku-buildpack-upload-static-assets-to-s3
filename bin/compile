#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

### Load dependencies
source ${BP_DIR}/lib/output.sh

whitelist_regex=${2:-''}
blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
if [ -d "$ENV_DIR" ]; then
  echo "Loading ENVs ${ENV_DIR}"
  for e in $(ls $ENV_DIR); do
    echo "File $e $ENV_DUR/$e"
    echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
    export "$e=$(cat $ENV_DIR/$e)"
    :
  done
fi

### Upload with Node
SCRIPT_DEST=${BUILD_DIR}/_s3_upload
mkdir ${SCRIPT_DEST}
cp ${BP_DIR}/package.json ${SCRIPT_DEST}
cp ${BP_DIR}/lib/upload.js ${SCRIPT_DEST}
echo "===="
ls $ENV_DIR
echo "===="
echo "AWS SD $AWS_STATIC_SOURCE_DIRECTORY"
cat <<EOF >> ${SCRIPT_DEST}/upload.sh
#!/usr/bin/env bash
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables

export AWS_STATIC_SOURCE_DIRECTORY=${AWS_STATIC_SOURCE_DIRECTORY}
export AWS_STATIC_BUCKET_NAME=${AWS_STATIC_BUCKET_NAME}
export AWS_STATIC_PREFIX=${AWS_STATIC_PREFIX}
export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
echo ${AWS_ACCESS_KEY_ID}
export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
echo ${AWS_SECRET_ACCESS_KEY}
echo VER ${HEROKU_RELEASE_VERSION}
yarn install
node upload.js
EOF
